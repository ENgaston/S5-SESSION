pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
    }

    stages {
        // Test auth module
        stage('Test auth') {
            agent {
                docker {
                    image 'golang:alpine'
                    args '-u root:root'
                }
            }
            steps {
                script {
                    def authModuleDir = 'weatherapp/auth/src/main'
                    dir(authModuleDir) {
                        sh '''
                            id
                            go build
                            ls -la
                        '''
                    }
                }
            }
        }

        // Test UI module
        stage('Test UI') {
            agent {
                docker {
                    image 'node:17'
                    args '-u root:root'
                }
            }
            steps {
                script {
                    def uiModuleDir = 'weatherapp/UI'
                    dir(uiModuleDir) {
                        sh 'npm run'
                    }
                }
            }
        }

        // Test weather module
        stage('Test weather') {
            agent {
                docker {
                    image 'python:3.8-slim-buster'
                    args '-u root:root'
                }
            }
            steps {
                script {
                    def weatherModuleDir = 'weatherapp/weather'
                    dir(weatherModuleDir) {
                        sh 'pip3 install -r requirements.txt'
                    }
                }
            }
        }

        // SonarQube analysis
        stage('SonarQube analysis') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:4.7.0'
                }
            }
            environment {
                CI = 'true'
            }
            steps {
                script {
                    def scannerHome = tool 'Sonar'
                    withSonarQubeEnv('Sonar') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }

        // Quality Gate
        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        // Docker login
        stage('Login') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }

        // The rest of your stages go here...

        // ... including the deployment stages.
    }
}
